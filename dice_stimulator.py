import random
import tkinter as tk

NUMOFROLLS = 2000
SIDES = 6

def biasedDie():
	"""
		Calls all functions required to generate a list of rolls for a biased die

		Arguements:
			None

		Returns:
			rolls (List): List of rolls generated
	"""	
	ch = True
	while ch == True:
		probabilites = getProbList()
		if sum(probabilites) == 1:
			rolls = generateBiasedRolls(probabilites)
			return rolls
		else:
			ch = exitChoice()


def getProbList():
	"""
		Promts the user for probability distribution.

		Arguements:
			None

		Returns:
			probList (List): probability distribution
	"""
	probList = [0] * SIDES
	ch = True

	while ch == True:
		print("Enter probabilities of each side as prompted in num/den form:")
		try:
			for i in range(SIDES):
				prob = input(f"{i+1} : ")
				num,den = map(float, prob.split('/'))
				probList[i] = num/den
				if probList[i] == 0 or probList[i] > 1:
					print("This value is incorrect! Enter the values again.")
					break
				ch = False
		except ValueError:
			ch = exitChoice()
		
	return probList


def generateBiasedRolls(probList):
	"""
		Generates rolls based on the given probability distribution.

		Arguements:
			probList (List): probability distribution

		Returns:
			rolls (List): rolls generated
	"""
	# initializing the lists
	length = len(probList)
	mapping = [0] * length
	rolls = [0] * NUMOFROLLS
	flip = [0] * NUMOFROLLS

	# mapping probabilities to their respective sides
	for i in range(length):
		for j in range(i):
				mapping[i] += probList[j]

	# generating random rolls
	for i in range(NUMOFROLLS):
		flip[i] = random.random()
		
	for i in range(NUMOFROLLS):
		for j in range(length):
				if flip[i] < mapping[j]:
					rolls[i] = j
					break
				else:
					rolls[i] = length

	return rolls


def fairDie():
	"""
		Calls all functions required to generate a value for a fair die

		Arguements:
			None

		Returns:
			dieValue (int): Value of the die generated.
	"""	
	#sides = sideCheck()
	dieValue = random.randint(1,6)
	return dieValue


def exitChoice():
	"""
		Anytime an extraneous value is entered, the user is prompted with an option
		to exit the stimulator.

		Arguements:
			None

		Returns:
			A boolean value based on the response of the user
	"""
	choice = input("Invalid Input. Do you want to exit (y/n)?")
	if choice.lower() == 'y':
		exit()
	else:
		return True


def performRolls():
	"""
		Generates die rolls based on user's choice of die and prints the result.

		Arguements:
			None	

		Returns:
			None
	"""	
	again = 'y'	
	ch = True
	
	print("Welcome to Dice Stimulator")

	while ch == True:

		choice = input("(1) Fair Die\n(2) Biased Die\n")

		if choice.lower() == "fair die" or int(choice) == 1:
			x = 1
			ch = False

		elif choice.lower() == "biased die" or int(choice) == 2:
			x = 2
			ch = False

		else:
			ch = exitChoice()
	
	if x == 1:
		dieValue = fairDie()
	else:
		dieOutput = biasedDie()
		dieValue = random.choice(dieOutput)

	gui(dieValue)

	again = input("Do you want to roll the same die again (y/n)?")

	while again.lower() == 'y':
		if x == 1:
			dieValue = fairDie()
		else:
			dieValue = random.choice(dieOutput)
		gui(dieValue)
		again = input("Do you want to roll the same die again (y/n)?")


def gui(valueOnDie):
	"""
		Generates a GUI of the number shown on the die.

		Arguements:
			valueOnDie (int): Value of the die generated by performRolls 

		Returns:
			None
	"""
	root = tk.Tk()

	mainWindow = tk.Canvas(root, height=200, width=200)
	mainWindow.pack()

	l1 = tk.Label(root, font=("Courier", 150))
	dice=['\u2680','\u2681','\u2682','\u2683','\u2684','\u2685']
	#configure the label
	temp = dice[valueOnDie-1]
	l1.config(text=f'{temp}')
	l1.place(relx=0.3, rely=0.1)

	root.mainloop()

if __name__ == '__main__':
	"""
		Main function :)
	"""
	performRolls()
